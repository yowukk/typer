# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'type.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QTextCharFormat, QTextCursor, QColor, QFont
from random import choice
from time import perf_counter
import res


class ClickableLabel(QtWidgets.QLabel):
    clicked = QtCore.pyqtSignal()
 
    def mousePressEvent(self, QMouseEvent):
        self.clicked.emit()
        QtWidgets.QLabel.mousePressEvent(self, QMouseEvent)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1260, 251)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.result_text = QtWidgets.QTextEdit(self.centralwidget)
        self.result_text.setGeometry(QtCore.QRect(0, 100, 1261, 151))
        self.result_text.setEnabled(False)
        self.result_text.setStyleSheet("color: rgb(209,208,197);\n"
"font: 16px \"MS Reference Sans Serif\";")
        self.result_text.setObjectName("result_text")
        self.timer = QtWidgets.QTextEdit(self.centralwidget)
        self.timer.setEnabled(False)
        self.timer.setGeometry(QtCore.QRect(50, 20, 61, 51))
        self.timer.setStyleSheet("font: 75 14pt \"Arial\";\n"
"color: rgb(226,183,20);\n"
"")
        self.timer.setObjectName("timer")
        self.restart_btn = ClickableLabel(self.centralwidget)
        self.restart_btn.setGeometry(QtCore.QRect(130, 20, 51, 51))
        self.restart_btn.setAutoFillBackground(False)
#         self.restart_btn.setStyleSheet("\n"
# "background-image: url('./img.png');")
        self.restart_btn.setText("")
        self.restart_btn.setTextFormat(QtCore.Qt.AutoText)
        self.restart_btn.setPixmap(QtGui.QPixmap(":/res/img.png"))
        self.restart_btn.setScaledContents(True)
        self.restart_btn.setWordWrap(False)
        self.restart_btn.setObjectName("restart_btn")
        self.text_edit = QtWidgets.QTextEdit(self.centralwidget)
        self.text_edit.setGeometry(QtCore.QRect(0, 100, 1251, 131))
        self.text_edit.setObjectName("text_edit")
        self.text_edit.raise_()
        self.result_text.raise_()
        self.timer.raise_()
        self.restart_btn.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.list = ["apple", "banana", "orange", "grapefruit", "kiwi", "strawberry", "raspberry", "blueberry", "blackberry", "peach", "plum", "pear", "cherry", "pineapple", "mango", "pomegranate", "watermelon", "grape", "lemon", "lime", "avocado", "tomato", "potato", "carrot", "celery", "cucumber", "onion", "garlic", "ginger", "turmeric", "pepper", "salt", "sugar", "flour", "butter", "oil", "vinegar", "soy sauce", "mustard", "mayonnaise", "ketchup", "honey", "maple syrup", "jam", "jelly", "peanut butter", "chocolate", "vanilla", "cinnamon", "nutmeg", "oregano", "basil", "thyme", "rosemary", "sage", "parsley", "coriander", "cumin", "paprika", "cardamom", "bay leaf", "cloves", "cocoa", "coffee", "tea", "milk", "yogurt", "cheese", "eggs", "chicken", "beef", "pork", "fish", "shrimp", "lobster", "crab", "scallops", "rice", "pasta", "bread", "bagel", "croissant", "muffin", "cake", "cookie", "pie", "ice cream", "popcorn", "chips", "pretzels", "nuts", "seeds","run", "walk", "jump", "hop", "skip", "dance", "sing", "play", "laugh", "cry", "smile", "frown", "talk", "whisper", "shout", "yell", "whistle", "clap", "cheer", "applaud", "wave", "nod", "shake", "hug", "kiss", "touch", "hold", "grab", "catch", "throw", "toss", "shoot", "aim", "hit", "kick", "punch", "box", "wrestle", "swim", "dive", "float", "sink", "climb", "crawl", "sneak", "hide", "seek", "find", "discover", "explore", "travel", "hike", "camp", "picnic", "relax", "meditate", "yoga", "exercise", "lift", "push", "pull", "stretch", "bend", "twist", "spin", "roll", "crawl", "fly", "soar", "glide", "dive", "crash", "explode", "burst", "shatter", "melt", "burn", "freeze", "chill", "cook", "bake", "roast", "fry", "boil", "steam", "saute", "stir-fry", "mix", "stir", "pour", "serve", "eat", "drink", "sip", "savor", "swallow", "happy", "sad", "angry", "excited", "anxious", "calm", "peaceful", "chaotic", "loud", "quiet", "busy", "lazy", "energetic", "tired", "strong", "weak", "fast", "slow", "smooth", "rough", "soft", "hard", "heavy", "light", "big", "small", "tall", "short", "thick", "thin", "wide", "narrow", "long", "short", "old", "young", "new", "ancient", "modern", "fresh", "stale", "clean", "dirty", "beautiful", "ugly", "pretty", "handsome", "ugly", "attractive", "repulsive", "sweet", "sour", "spicy", "bitter", "salty", "savory", "delicious", "tasty", "yummy", "nutritious", "healthy", "unhealthy", "good", "bad", "excellent", "poor", "rich", "poor", "expensive", "cheap", "hardworking", "lazy", "intelligent", "stupid", "smart", "dumb", "creative", "imaginative", "innovative", "boring", "interesting", "fascinating", "amazing", "incredible", "fantastic", "terrible", "awful", "horrible", "dangerous", "safe", "comfortable", "uncomfortable", "happy", "sad", "content", "discontent"]
        self.s = ""
        self.generator()
        self.timeout = 30

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.start = perf_counter()
        self.counter_mistakes = 0
        self.counter_correct = 0
        self.counter = 0
        self.previous = 0
        self.flag = False
        self.before = [False] * len(self.s)
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.result_text.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:15pt;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:10px; margin-right:10px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:25px;\">" + self.s + "</span></p></body></html>"))
        self.timer.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:14pt; font-weight:72; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:15pt; font-weight:400;\">" + str(self.timeout) + "</span></p></body></html>"))


    def generator(self):
        while len(self.s) < 406:
            self.s += choice(self.list) + " "

    def add_functions(self) :
        self.time = QTimer()
        self.time.start(1000)
        self.time.timeout.connect(lambda: self.timer_function())
        self.text_edit.setFocus()
        self.text_edit.textChanged.connect(lambda: self.output())
        self.restart_btn.clicked.connect(lambda: self.restart())
        
        

    def restart(self):
        self.counter_mistakes = 0
        self.counter_correct = 0
        self.counter = 0
        self.previous = 0
        self.flag = False
        self.text_edit.clear()
        self.s = ''
        self.generator()
        self.before = [False] * len(self.s)
        self.retranslateUi(MainWindow)


    def output (self) :
        if self.flag :
            return 0
        if self.previous > len(self.text_edit.toPlainText()):
            cursor = self.result_text.textCursor()
            cursor.setPosition(len(self.text_edit.toPlainText()))
            cursor.movePosition(QTextCursor.Right, QTextCursor.KeepAnchor, 1)
            char_format = QTextCharFormat()
            char_format.setFont(QtGui.QFont('MS Shell Dlg 2', 15))
            char_format.setForeground(QtGui.QBrush(QColor(209,208,197)))
            cursor.setCharFormat(char_format)
            self.previous = len(self.text_edit.toPlainText())
            if self.before[len(self.text_edit.toPlainText()) - 1]:
                self.counter_correct -= 1
                self.before[len(self.text_edit.toPlainText()) - 1] = False
            return 0
        if len(self.text_edit.toPlainText()) == 0:
            self.retranslateUi(MainWindow)
            return 0
        cursor = self.result_text.textCursor()
        cursor.setPosition(len(self.text_edit.toPlainText()) - 1)
        cursor.movePosition(QTextCursor.Right, QTextCursor.KeepAnchor, 1)
        self.previous = len(self.text_edit.toPlainText())
        char_format = QTextCharFormat()
        char_format.setFont(QFont('MS Shell Dlg 2', 15))
        char_format.setFontUnderline(True)
        self.counter += 1
        if self.text_edit.toPlainText()[-1] == self.result_text.toPlainText()[len(self.text_edit.toPlainText()) - 1]:
            char_format.setForeground(QColor(0, 255, 51))
            cursor.setCharFormat(char_format)
            self.counter_correct += 1
            self.before[len(self.text_edit.toPlainText()) - 1] = True
        else :
            char_format.setForeground(QColor(255, 51, 0))
            cursor.setCharFormat(char_format)
            self.counter_mistakes += 1
        if len(self.text_edit.toPlainText()) == len(self.result_text.toPlainText()):
            self.function_end()

    def timer_function(self):
        if len(self.text_edit.toPlainText()) == 0:
            self.retranslateUi(MainWindow)
            self.counter_mistakes = 0
            self.counter_correct = 0
            self.counter = 0
            self.previous = 0
            self.flag = False
            self.text_edit.clear()
            return 0
        if self.flag :
            return 0
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.timer.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:14pt; font-weight:72; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:15pt; font-weight:400;\">" + str(int(self.timer.toPlainText()) - 1) + "</span></p></body></html>"))
        if self.timer.toPlainText() == "0":
            self.function_end()


    def function_end(self):
        cpm = self.counter_correct / (self.timeout - int(self.timer.toPlainText())) * 60
        if self.counter == 0:
            acc = 0
        else:
            acc = 1 - self.counter_mistakes / self.counter
            acc *= 100
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.result_text.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:20px;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:10px; margin-right:10px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:30px; color: #e2b714\">" + "cpm: " + str(round(cpm , 1)) + "<br>" + "acc: " + str(int(acc)) + "%" + "</span></p></body></html>"))

        self.flag = True


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
